; ***************
; cepstrum, mfcc

 ibins init gifftsize/2
 kIn[] init gifftsize
 kcnt init 0
 kIn shiftin {{input}}
 kcnt += ksmps
 if kcnt == gifftsize then
  kFFT[] = rfft(kIn)
  kPows[] = pows(kFFT)
  kMFB[] = log(mfb(kPows,300,8000,8))
  kmfcc[] = dct(kMFB)
  kcnt = 0
 endif

; ***************
; normalisation

imfccscale      = 1/200
kmfcc0          samphold kmfcc[0]*imfccscale, kgate
kmfcc1          samphold kmfcc[1]*imfccscale, kgate
kmfcc2          samphold kmfcc[2]*imfccscale, kgate
kmfcc3          samphold kmfcc[3]*imfccscale, kgate
kmfcc4          samphold kmfcc[4]*imfccscale, kgate
kmfcc5          samphold kmfcc[5]*imfccscale, kgate
kmfcc6          samphold kmfcc[6]*imfccscale, kgate
kmfcc7          samphold kmfcc[7]*imfccscale, kgate

; ***************
; limiter

kmfcc0          limit kmfcc0, 0, 1
kmfcc1          limit kmfcc1, 0, 1
kmfcc2          limit kmfcc2, 0, 1
kmfcc3          limit kmfcc3, 0, 1
kmfcc4          limit kmfcc4, 0, 1
kmfcc5          limit kmfcc5, 0, 1
kmfcc6          limit kmfcc6, 0, 1
kmfcc7          limit kmfcc7, 0, 1

; ***************
; return features

chnset kmfcc0,      "kmfcc0"
chnset kmfcc1,      "kmfcc1"
chnset kmfcc2,      "kmfcc2"
chnset kmfcc3,      "kmfcc3"
chnset kmfcc4,      "kmfcc4"
chnset kmfcc5,      "kmfcc5"
chnset kmfcc6,      "kmfcc6"
chnset kmfcc7,      "kmfcc7"
